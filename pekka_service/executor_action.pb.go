// Code generated by protoc-gen-go.
// source: executor_action.proto
// DO NOT EDIT!

package PekkaService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExecutorAction struct {
	Id         uint32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ExecutorId uint32            `protobuf:"varint,3,opt,name=executorId" json:"executorId,omitempty"`
	ActionType string            `protobuf:"bytes,4,opt,name=actionType" json:"actionType,omitempty"`
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ExecutorAction) Reset()                    { *m = ExecutorAction{} }
func (m *ExecutorAction) String() string            { return proto.CompactTextString(m) }
func (*ExecutorAction) ProtoMessage()               {}
func (*ExecutorAction) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ExecutorAction) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExecutorAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecutorAction) GetExecutorId() uint32 {
	if m != nil {
		return m.ExecutorId
	}
	return 0
}

func (m *ExecutorAction) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *ExecutorAction) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type AddExecutorActionToExecutorRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ExecutorId uint32 `protobuf:"varint,2,opt,name=executorId" json:"executorId,omitempty"`
}

func (m *AddExecutorActionToExecutorRequest) Reset()         { *m = AddExecutorActionToExecutorRequest{} }
func (m *AddExecutorActionToExecutorRequest) String() string { return proto.CompactTextString(m) }
func (*AddExecutorActionToExecutorRequest) ProtoMessage()    {}
func (*AddExecutorActionToExecutorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1}
}

func (m *AddExecutorActionToExecutorRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddExecutorActionToExecutorRequest) GetExecutorId() uint32 {
	if m != nil {
		return m.ExecutorId
	}
	return 0
}

type AddExecutorActionToExecutorResponse struct {
	ExecutorAction *ExecutorAction `protobuf:"bytes,1,opt,name=executorAction" json:"executorAction,omitempty"`
}

func (m *AddExecutorActionToExecutorResponse) Reset()         { *m = AddExecutorActionToExecutorResponse{} }
func (m *AddExecutorActionToExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*AddExecutorActionToExecutorResponse) ProtoMessage()    {}
func (*AddExecutorActionToExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2}
}

func (m *AddExecutorActionToExecutorResponse) GetExecutorAction() *ExecutorAction {
	if m != nil {
		return m.ExecutorAction
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutorAction)(nil), "PekkaService.ExecutorAction")
	proto.RegisterType((*AddExecutorActionToExecutorRequest)(nil), "PekkaService.AddExecutorActionToExecutorRequest")
	proto.RegisterType((*AddExecutorActionToExecutorResponse)(nil), "PekkaService.AddExecutorActionToExecutorResponse")
}

func init() { proto.RegisterFile("executor_action.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x25, 0x9b, 0xf6, 0x83, 0x4e, 0x3f, 0xa3, 0x2e, 0x0a, 0x4b, 0x11, 0x09, 0xf1, 0x92, 0x83,
	0xe4, 0x50, 0x2f, 0x22, 0x78, 0x28, 0xd8, 0x83, 0xe0, 0xa1, 0xac, 0x3d, 0x78, 0x2b, 0x6b, 0x76,
	0x0e, 0x21, 0x36, 0xbb, 0x6e, 0x36, 0xc5, 0x1c, 0xfd, 0xe7, 0xd2, 0x8d, 0x29, 0x49, 0xc0, 0xde,
	0x66, 0xe6, 0xbd, 0xb7, 0x6f, 0xe6, 0x2d, 0x5c, 0xe2, 0x17, 0xa6, 0x95, 0x55, 0x66, 0x23, 0x52,
	0x9b, 0xa9, 0x22, 0xd1, 0x46, 0x59, 0x45, 0xff, 0xaf, 0x30, 0xcf, 0xc5, 0x2b, 0x9a, 0x5d, 0x96,
	0xe2, 0xec, 0xbc, 0xc1, 0x36, 0xb6, 0xd6, 0xd8, 0x10, 0xa2, 0x6f, 0x02, 0xc1, 0xf2, 0x57, 0xba,
	0x70, 0x28, 0x0d, 0x80, 0x64, 0x92, 0x79, 0xa1, 0x17, 0x9f, 0x70, 0x92, 0x49, 0x4a, 0x61, 0x54,
	0x88, 0x2d, 0x32, 0x12, 0x7a, 0xf1, 0x84, 0xbb, 0x9a, 0x5e, 0x03, 0xb4, 0x86, 0xcf, 0x92, 0xf9,
	0x8e, 0xdb, 0x99, 0xec, 0xf1, 0xc6, 0x6b, 0x5d, 0x6b, 0x64, 0x23, 0xa7, 0xec, 0x4c, 0xe8, 0x0b,
	0x80, 0x16, 0x46, 0x6c, 0xd1, 0xa2, 0x29, 0xd9, 0x38, 0xf4, 0xe3, 0xe9, 0xfc, 0x36, 0xe9, 0x2e,
	0x9b, 0xf4, 0xb7, 0x4a, 0x56, 0x07, 0xfa, 0xb2, 0xb0, 0xa6, 0xe6, 0x1d, 0xfd, 0xec, 0x11, 0x4e,
	0x07, 0x30, 0x3d, 0x03, 0x3f, 0xc7, 0xda, 0x5d, 0x31, 0xe1, 0xfb, 0x92, 0x5e, 0xc0, 0x78, 0x27,
	0x3e, 0xaa, 0xf6, 0x8e, 0xa6, 0x79, 0x20, 0xf7, 0x5e, 0xf4, 0x06, 0xd1, 0x42, 0xca, 0xbe, 0xdf,
	0x5a, 0xb5, 0x3d, 0xc7, 0xcf, 0x0a, 0x4b, 0x7b, 0x88, 0xc1, 0xfb, 0x33, 0x06, 0x32, 0x8c, 0x21,
	0xca, 0xe1, 0xe6, 0xe8, 0xcb, 0xa5, 0x56, 0x45, 0x89, 0xf4, 0x09, 0x02, 0xec, 0x71, 0x9c, 0xc9,
	0x74, 0x7e, 0x75, 0x2c, 0x11, 0x3e, 0xd0, 0xbc, 0xff, 0x73, 0x3f, 0x7a, 0xf7, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x4f, 0xff, 0x72, 0x10, 0x0b, 0x02, 0x00, 0x00,
}
