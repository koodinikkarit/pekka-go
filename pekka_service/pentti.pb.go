// Code generated by protoc-gen-go.
// source: pentti.proto
// DO NOT EDIT!

package PekkaService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Pentti struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *Pentti) Reset()                    { *m = Pentti{} }
func (m *Pentti) String() string            { return proto.CompactTextString(m) }
func (*Pentti) ProtoMessage()               {}
func (*Pentti) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Pentti) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pentti) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type FetchPenttiDevicesRequest struct {
	Offset uint32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *FetchPenttiDevicesRequest) Reset()                    { *m = FetchPenttiDevicesRequest{} }
func (m *FetchPenttiDevicesRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchPenttiDevicesRequest) ProtoMessage()               {}
func (*FetchPenttiDevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *FetchPenttiDevicesRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchPenttiDevicesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type FetchPenttiByIdRequest struct {
	PenttiId uint32 `protobuf:"varint,1,opt,name=penttiId" json:"penttiId,omitempty"`
}

func (m *FetchPenttiByIdRequest) Reset()                    { *m = FetchPenttiByIdRequest{} }
func (m *FetchPenttiByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchPenttiByIdRequest) ProtoMessage()               {}
func (*FetchPenttiByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *FetchPenttiByIdRequest) GetPenttiId() uint32 {
	if m != nil {
		return m.PenttiId
	}
	return 0
}

type FetchPenttiByIdResponse struct {
	Pentti *Pentti `protobuf:"bytes,1,opt,name=pentti" json:"pentti,omitempty"`
}

func (m *FetchPenttiByIdResponse) Reset()                    { *m = FetchPenttiByIdResponse{} }
func (m *FetchPenttiByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchPenttiByIdResponse) ProtoMessage()               {}
func (*FetchPenttiByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *FetchPenttiByIdResponse) GetPentti() *Pentti {
	if m != nil {
		return m.Pentti
	}
	return nil
}

type FetchButtonsByPenttiIdRequest struct {
	PenttiId uint32 `protobuf:"varint,1,opt,name=penttiId" json:"penttiId,omitempty"`
}

func (m *FetchButtonsByPenttiIdRequest) Reset()                    { *m = FetchButtonsByPenttiIdRequest{} }
func (m *FetchButtonsByPenttiIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchButtonsByPenttiIdRequest) ProtoMessage()               {}
func (*FetchButtonsByPenttiIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *FetchButtonsByPenttiIdRequest) GetPenttiId() uint32 {
	if m != nil {
		return m.PenttiId
	}
	return 0
}

func init() {
	proto.RegisterType((*Pentti)(nil), "PekkaService.Pentti")
	proto.RegisterType((*FetchPenttiDevicesRequest)(nil), "PekkaService.FetchPenttiDevicesRequest")
	proto.RegisterType((*FetchPenttiByIdRequest)(nil), "PekkaService.FetchPenttiByIdRequest")
	proto.RegisterType((*FetchPenttiByIdResponse)(nil), "PekkaService.FetchPenttiByIdResponse")
	proto.RegisterType((*FetchButtonsByPenttiIdRequest)(nil), "PekkaService.FetchButtonsByPenttiIdRequest")
}

func init() { proto.RegisterFile("pentti.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4b, 0xc5, 0x30,
	0x14, 0x85, 0x69, 0xc0, 0xa0, 0xd7, 0xf7, 0x1c, 0xc2, 0xa3, 0x56, 0x41, 0x28, 0x99, 0x3a, 0x48,
	0x07, 0x75, 0x73, 0x2b, 0xa2, 0x74, 0x2b, 0xf1, 0x17, 0x68, 0x7b, 0x8b, 0xa1, 0xda, 0xc4, 0xe6,
	0x56, 0xe8, 0xbf, 0x17, 0x93, 0x54, 0x0a, 0x2e, 0x8e, 0x87, 0x9c, 0xef, 0xcb, 0x49, 0x60, 0x67,
	0x71, 0x24, 0xd2, 0xa5, 0x9d, 0x0c, 0x19, 0xb1, 0x6b, 0x70, 0x18, 0x5e, 0x9e, 0x71, 0xfa, 0xd2,
	0x2d, 0xca, 0x02, 0x78, 0xe3, 0x4f, 0xc5, 0x19, 0x30, 0xdd, 0x65, 0x49, 0x9e, 0x14, 0x7b, 0xc5,
	0x74, 0xe7, 0xb3, 0xcd, 0x58, 0x9e, 0x14, 0x27, 0x8a, 0x69, 0x2b, 0x6b, 0xb8, 0x78, 0x44, 0x6a,
	0xdf, 0x42, 0xfd, 0x01, 0x7f, 0x70, 0xa7, 0xf0, 0x73, 0x46, 0x47, 0x22, 0x05, 0x6e, 0xfa, 0xde,
	0x21, 0x45, 0x41, 0x4c, 0xe2, 0x00, 0x47, 0xef, 0xfa, 0x43, 0x93, 0xf7, 0xec, 0x55, 0x08, 0xf2,
	0x0e, 0xd2, 0x8d, 0xaa, 0x5a, 0xea, 0x6e, 0xf5, 0x5c, 0xc2, 0x71, 0x18, 0x5b, 0xaf, 0x53, 0x7e,
	0xb3, 0x7c, 0x82, 0xf3, 0x3f, 0x94, 0xb3, 0x66, 0x74, 0x28, 0xae, 0x81, 0x87, 0x9a, 0x87, 0x4e,
	0x6f, 0x0e, 0xe5, 0xf6, 0x91, 0x65, 0x20, 0x54, 0xec, 0xc8, 0x7b, 0xb8, 0xf2, 0xa2, 0x6a, 0x26,
	0x32, 0xa3, 0xab, 0x96, 0x26, 0x5e, 0xf1, 0x8f, 0x15, 0xaf, 0xdc, 0xff, 0xe2, 0xed, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x95, 0xef, 0xea, 0x61, 0x55, 0x01, 0x00, 0x00,
}
