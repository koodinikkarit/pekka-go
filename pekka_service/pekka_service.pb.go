// Code generated by protoc-gen-go.
// source: pekka_service.proto
// DO NOT EDIT!

package PekkaService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pekka service

type PekkaClient interface {
	FetchWeeklyTimers(ctx context.Context, in *FetchWeeklyTimersRequest, opts ...grpc.CallOption) (Pekka_FetchWeeklyTimersClient, error)
	FetchWeeklyTimerById(ctx context.Context, in *FetchWeeklyTimerByIdRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerByIdResponse, error)
	FetchWeeklyTimerBySlug(ctx context.Context, in *FetchWeeklyTimerBySlugRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerBySlugResponse, error)
}

type pekkaClient struct {
	cc *grpc.ClientConn
}

func NewPekkaClient(cc *grpc.ClientConn) PekkaClient {
	return &pekkaClient{cc}
}

func (c *pekkaClient) FetchWeeklyTimers(ctx context.Context, in *FetchWeeklyTimersRequest, opts ...grpc.CallOption) (Pekka_FetchWeeklyTimersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pekka_serviceDesc.Streams[0], c.cc, "/PekkaService.Pekka/fetchWeeklyTimers", opts...)
	if err != nil {
		return nil, err
	}
	x := &pekkaFetchWeeklyTimersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pekka_FetchWeeklyTimersClient interface {
	Recv() (*WeeklyTimer, error)
	grpc.ClientStream
}

type pekkaFetchWeeklyTimersClient struct {
	grpc.ClientStream
}

func (x *pekkaFetchWeeklyTimersClient) Recv() (*WeeklyTimer, error) {
	m := new(WeeklyTimer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pekkaClient) FetchWeeklyTimerById(ctx context.Context, in *FetchWeeklyTimerByIdRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerByIdResponse, error) {
	out := new(FetchWeeklyTimerByIdResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/fetchWeeklyTimerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) FetchWeeklyTimerBySlug(ctx context.Context, in *FetchWeeklyTimerBySlugRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerBySlugResponse, error) {
	out := new(FetchWeeklyTimerBySlugResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/fetchWeeklyTimerBySlug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pekka service

type PekkaServer interface {
	FetchWeeklyTimers(*FetchWeeklyTimersRequest, Pekka_FetchWeeklyTimersServer) error
	FetchWeeklyTimerById(context.Context, *FetchWeeklyTimerByIdRequest) (*FetchWeeklyTimerByIdResponse, error)
	FetchWeeklyTimerBySlug(context.Context, *FetchWeeklyTimerBySlugRequest) (*FetchWeeklyTimerBySlugResponse, error)
}

func RegisterPekkaServer(s *grpc.Server, srv PekkaServer) {
	s.RegisterService(&_Pekka_serviceDesc, srv)
}

func _Pekka_FetchWeeklyTimers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchWeeklyTimersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PekkaServer).FetchWeeklyTimers(m, &pekkaFetchWeeklyTimersServer{stream})
}

type Pekka_FetchWeeklyTimersServer interface {
	Send(*WeeklyTimer) error
	grpc.ServerStream
}

type pekkaFetchWeeklyTimersServer struct {
	grpc.ServerStream
}

func (x *pekkaFetchWeeklyTimersServer) Send(m *WeeklyTimer) error {
	return x.ServerStream.SendMsg(m)
}

func _Pekka_FetchWeeklyTimerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWeeklyTimerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).FetchWeeklyTimerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/FetchWeeklyTimerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).FetchWeeklyTimerById(ctx, req.(*FetchWeeklyTimerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_FetchWeeklyTimerBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWeeklyTimerBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).FetchWeeklyTimerBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/FetchWeeklyTimerBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).FetchWeeklyTimerBySlug(ctx, req.(*FetchWeeklyTimerBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pekka_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PekkaService.Pekka",
	HandlerType: (*PekkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchWeeklyTimerById",
			Handler:    _Pekka_FetchWeeklyTimerById_Handler,
		},
		{
			MethodName: "fetchWeeklyTimerBySlug",
			Handler:    _Pekka_FetchWeeklyTimerBySlug_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchWeeklyTimers",
			Handler:       _Pekka_FetchWeeklyTimers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pekka_service.proto",
}

func init() { proto.RegisterFile("pekka_service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x48, 0xcd, 0xce,
	0x4e, 0x8c, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x09, 0x00, 0x09, 0x06, 0x43, 0xc4, 0xa4, 0x84, 0xca, 0x53, 0x53, 0xb3, 0x73, 0x2a, 0xe3,
	0x4b, 0x32, 0x73, 0x53, 0x8b, 0x20, 0x2a, 0x8c, 0x4e, 0x33, 0x71, 0xb1, 0x82, 0x15, 0x09, 0x45,
	0x71, 0x09, 0xa6, 0xa5, 0x96, 0x24, 0x67, 0x84, 0x83, 0x15, 0x85, 0x80, 0xd4, 0x14, 0x0b, 0xa9,
	0xe9, 0x21, 0x9b, 0xa0, 0xe7, 0x86, 0xae, 0x20, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a,
	0x12, 0x55, 0x1d, 0x92, 0x12, 0x25, 0x06, 0x03, 0x46, 0xa1, 0x7c, 0x2e, 0x11, 0x74, 0xb3, 0x9d,
	0x2a, 0x3d, 0x53, 0x84, 0x34, 0xf1, 0x1b, 0x0f, 0x52, 0x03, 0xb3, 0x41, 0x8b, 0x18, 0xa5, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x0c, 0x42, 0xa5, 0x5c, 0x62, 0x98, 0x16, 0x06, 0xe7, 0x94,
	0xa6, 0x0b, 0x69, 0x13, 0x32, 0x07, 0xa4, 0x0a, 0x66, 0xa9, 0x0e, 0x71, 0x8a, 0x61, 0xd6, 0x26,
	0xb1, 0x81, 0x03, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x3c, 0x93, 0xf7, 0x8d, 0x01,
	0x00, 0x00,
}
