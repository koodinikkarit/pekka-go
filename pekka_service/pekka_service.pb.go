// Code generated by protoc-gen-go.
// source: pekka_service.proto
// DO NOT EDIT!

package PekkaService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pekka service

type PekkaClient interface {
	FetchWeeklyTimers(ctx context.Context, in *FetchWeeklyTimersRequest, opts ...grpc.CallOption) (Pekka_FetchWeeklyTimersClient, error)
	FetchWeeklyTimerById(ctx context.Context, in *FetchWeeklyTimerByIdRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerByIdResponse, error)
	FetchWeeklyTimerBySlug(ctx context.Context, in *FetchWeeklyTimerBySlugRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerBySlugResponse, error)
	CreateWeeklyTimer(ctx context.Context, in *CreateWeeklyTimerRequest, opts ...grpc.CallOption) (*CreateWeeklyTimerResponse, error)
	EditWeeklyTimer(ctx context.Context, in *EditWeeklyTimerRequest, opts ...grpc.CallOption) (*EditWeeklyTimerResponse, error)
	FetchExecutors(ctx context.Context, in *FetchExecutorsRequest, opts ...grpc.CallOption) (Pekka_FetchExecutorsClient, error)
	FetchExecutorById(ctx context.Context, in *FetchExecutorByIdRequest, opts ...grpc.CallOption) (*FetchExecutorByIdResponse, error)
	FetchExecutorActionsByExecutorId(ctx context.Context, in *FetchExecutorActionsByExecutorIdRequest, opts ...grpc.CallOption) (Pekka_FetchExecutorActionsByExecutorIdClient, error)
	CreateExecutor(ctx context.Context, in *CreateExecutorRequest, opts ...grpc.CallOption) (*CreateExecutorResponse, error)
	AddExecutorActionToExecutor(ctx context.Context, in *AddExecutorActionToExecutorRequest, opts ...grpc.CallOption) (*AddExecutorActionToExecutorResponse, error)
	EditButton(ctx context.Context, in *EditButtonRequest, opts ...grpc.CallOption) (*EditButtonResponse, error)
	FetchPenttiDevices(ctx context.Context, in *FetchPenttiDevicesRequest, opts ...grpc.CallOption) (Pekka_FetchPenttiDevicesClient, error)
	FetchPenttiById(ctx context.Context, in *FetchPenttiByIdRequest, opts ...grpc.CallOption) (*FetchPenttiByIdResponse, error)
	FetchButtonsByPenttiId(ctx context.Context, in *FetchButtonsByPenttiIdRequest, opts ...grpc.CallOption) (Pekka_FetchButtonsByPenttiIdClient, error)
}

type pekkaClient struct {
	cc *grpc.ClientConn
}

func NewPekkaClient(cc *grpc.ClientConn) PekkaClient {
	return &pekkaClient{cc}
}

func (c *pekkaClient) FetchWeeklyTimers(ctx context.Context, in *FetchWeeklyTimersRequest, opts ...grpc.CallOption) (Pekka_FetchWeeklyTimersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pekka_serviceDesc.Streams[0], c.cc, "/PekkaService.Pekka/fetchWeeklyTimers", opts...)
	if err != nil {
		return nil, err
	}
	x := &pekkaFetchWeeklyTimersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pekka_FetchWeeklyTimersClient interface {
	Recv() (*WeeklyTimer, error)
	grpc.ClientStream
}

type pekkaFetchWeeklyTimersClient struct {
	grpc.ClientStream
}

func (x *pekkaFetchWeeklyTimersClient) Recv() (*WeeklyTimer, error) {
	m := new(WeeklyTimer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pekkaClient) FetchWeeklyTimerById(ctx context.Context, in *FetchWeeklyTimerByIdRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerByIdResponse, error) {
	out := new(FetchWeeklyTimerByIdResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/fetchWeeklyTimerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) FetchWeeklyTimerBySlug(ctx context.Context, in *FetchWeeklyTimerBySlugRequest, opts ...grpc.CallOption) (*FetchWeeklyTimerBySlugResponse, error) {
	out := new(FetchWeeklyTimerBySlugResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/fetchWeeklyTimerBySlug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) CreateWeeklyTimer(ctx context.Context, in *CreateWeeklyTimerRequest, opts ...grpc.CallOption) (*CreateWeeklyTimerResponse, error) {
	out := new(CreateWeeklyTimerResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/createWeeklyTimer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) EditWeeklyTimer(ctx context.Context, in *EditWeeklyTimerRequest, opts ...grpc.CallOption) (*EditWeeklyTimerResponse, error) {
	out := new(EditWeeklyTimerResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/editWeeklyTimer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) FetchExecutors(ctx context.Context, in *FetchExecutorsRequest, opts ...grpc.CallOption) (Pekka_FetchExecutorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pekka_serviceDesc.Streams[1], c.cc, "/PekkaService.Pekka/fetchExecutors", opts...)
	if err != nil {
		return nil, err
	}
	x := &pekkaFetchExecutorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pekka_FetchExecutorsClient interface {
	Recv() (*Executor, error)
	grpc.ClientStream
}

type pekkaFetchExecutorsClient struct {
	grpc.ClientStream
}

func (x *pekkaFetchExecutorsClient) Recv() (*Executor, error) {
	m := new(Executor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pekkaClient) FetchExecutorById(ctx context.Context, in *FetchExecutorByIdRequest, opts ...grpc.CallOption) (*FetchExecutorByIdResponse, error) {
	out := new(FetchExecutorByIdResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/fetchExecutorById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) FetchExecutorActionsByExecutorId(ctx context.Context, in *FetchExecutorActionsByExecutorIdRequest, opts ...grpc.CallOption) (Pekka_FetchExecutorActionsByExecutorIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pekka_serviceDesc.Streams[2], c.cc, "/PekkaService.Pekka/fetchExecutorActionsByExecutorId", opts...)
	if err != nil {
		return nil, err
	}
	x := &pekkaFetchExecutorActionsByExecutorIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pekka_FetchExecutorActionsByExecutorIdClient interface {
	Recv() (*ExecutorAction, error)
	grpc.ClientStream
}

type pekkaFetchExecutorActionsByExecutorIdClient struct {
	grpc.ClientStream
}

func (x *pekkaFetchExecutorActionsByExecutorIdClient) Recv() (*ExecutorAction, error) {
	m := new(ExecutorAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pekkaClient) CreateExecutor(ctx context.Context, in *CreateExecutorRequest, opts ...grpc.CallOption) (*CreateExecutorResponse, error) {
	out := new(CreateExecutorResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/createExecutor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) AddExecutorActionToExecutor(ctx context.Context, in *AddExecutorActionToExecutorRequest, opts ...grpc.CallOption) (*AddExecutorActionToExecutorResponse, error) {
	out := new(AddExecutorActionToExecutorResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/addExecutorActionToExecutor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) EditButton(ctx context.Context, in *EditButtonRequest, opts ...grpc.CallOption) (*EditButtonResponse, error) {
	out := new(EditButtonResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/editButton", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) FetchPenttiDevices(ctx context.Context, in *FetchPenttiDevicesRequest, opts ...grpc.CallOption) (Pekka_FetchPenttiDevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pekka_serviceDesc.Streams[3], c.cc, "/PekkaService.Pekka/fetchPenttiDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &pekkaFetchPenttiDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pekka_FetchPenttiDevicesClient interface {
	Recv() (*Pentti, error)
	grpc.ClientStream
}

type pekkaFetchPenttiDevicesClient struct {
	grpc.ClientStream
}

func (x *pekkaFetchPenttiDevicesClient) Recv() (*Pentti, error) {
	m := new(Pentti)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pekkaClient) FetchPenttiById(ctx context.Context, in *FetchPenttiByIdRequest, opts ...grpc.CallOption) (*FetchPenttiByIdResponse, error) {
	out := new(FetchPenttiByIdResponse)
	err := grpc.Invoke(ctx, "/PekkaService.Pekka/fetchPenttiById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pekkaClient) FetchButtonsByPenttiId(ctx context.Context, in *FetchButtonsByPenttiIdRequest, opts ...grpc.CallOption) (Pekka_FetchButtonsByPenttiIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pekka_serviceDesc.Streams[4], c.cc, "/PekkaService.Pekka/fetchButtonsByPenttiId", opts...)
	if err != nil {
		return nil, err
	}
	x := &pekkaFetchButtonsByPenttiIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pekka_FetchButtonsByPenttiIdClient interface {
	Recv() (*Button, error)
	grpc.ClientStream
}

type pekkaFetchButtonsByPenttiIdClient struct {
	grpc.ClientStream
}

func (x *pekkaFetchButtonsByPenttiIdClient) Recv() (*Button, error) {
	m := new(Button)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Pekka service

type PekkaServer interface {
	FetchWeeklyTimers(*FetchWeeklyTimersRequest, Pekka_FetchWeeklyTimersServer) error
	FetchWeeklyTimerById(context.Context, *FetchWeeklyTimerByIdRequest) (*FetchWeeklyTimerByIdResponse, error)
	FetchWeeklyTimerBySlug(context.Context, *FetchWeeklyTimerBySlugRequest) (*FetchWeeklyTimerBySlugResponse, error)
	CreateWeeklyTimer(context.Context, *CreateWeeklyTimerRequest) (*CreateWeeklyTimerResponse, error)
	EditWeeklyTimer(context.Context, *EditWeeklyTimerRequest) (*EditWeeklyTimerResponse, error)
	FetchExecutors(*FetchExecutorsRequest, Pekka_FetchExecutorsServer) error
	FetchExecutorById(context.Context, *FetchExecutorByIdRequest) (*FetchExecutorByIdResponse, error)
	FetchExecutorActionsByExecutorId(*FetchExecutorActionsByExecutorIdRequest, Pekka_FetchExecutorActionsByExecutorIdServer) error
	CreateExecutor(context.Context, *CreateExecutorRequest) (*CreateExecutorResponse, error)
	AddExecutorActionToExecutor(context.Context, *AddExecutorActionToExecutorRequest) (*AddExecutorActionToExecutorResponse, error)
	EditButton(context.Context, *EditButtonRequest) (*EditButtonResponse, error)
	FetchPenttiDevices(*FetchPenttiDevicesRequest, Pekka_FetchPenttiDevicesServer) error
	FetchPenttiById(context.Context, *FetchPenttiByIdRequest) (*FetchPenttiByIdResponse, error)
	FetchButtonsByPenttiId(*FetchButtonsByPenttiIdRequest, Pekka_FetchButtonsByPenttiIdServer) error
}

func RegisterPekkaServer(s *grpc.Server, srv PekkaServer) {
	s.RegisterService(&_Pekka_serviceDesc, srv)
}

func _Pekka_FetchWeeklyTimers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchWeeklyTimersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PekkaServer).FetchWeeklyTimers(m, &pekkaFetchWeeklyTimersServer{stream})
}

type Pekka_FetchWeeklyTimersServer interface {
	Send(*WeeklyTimer) error
	grpc.ServerStream
}

type pekkaFetchWeeklyTimersServer struct {
	grpc.ServerStream
}

func (x *pekkaFetchWeeklyTimersServer) Send(m *WeeklyTimer) error {
	return x.ServerStream.SendMsg(m)
}

func _Pekka_FetchWeeklyTimerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWeeklyTimerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).FetchWeeklyTimerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/FetchWeeklyTimerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).FetchWeeklyTimerById(ctx, req.(*FetchWeeklyTimerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_FetchWeeklyTimerBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWeeklyTimerBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).FetchWeeklyTimerBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/FetchWeeklyTimerBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).FetchWeeklyTimerBySlug(ctx, req.(*FetchWeeklyTimerBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_CreateWeeklyTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWeeklyTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).CreateWeeklyTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/CreateWeeklyTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).CreateWeeklyTimer(ctx, req.(*CreateWeeklyTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_EditWeeklyTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWeeklyTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).EditWeeklyTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/EditWeeklyTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).EditWeeklyTimer(ctx, req.(*EditWeeklyTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_FetchExecutors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchExecutorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PekkaServer).FetchExecutors(m, &pekkaFetchExecutorsServer{stream})
}

type Pekka_FetchExecutorsServer interface {
	Send(*Executor) error
	grpc.ServerStream
}

type pekkaFetchExecutorsServer struct {
	grpc.ServerStream
}

func (x *pekkaFetchExecutorsServer) Send(m *Executor) error {
	return x.ServerStream.SendMsg(m)
}

func _Pekka_FetchExecutorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchExecutorByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).FetchExecutorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/FetchExecutorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).FetchExecutorById(ctx, req.(*FetchExecutorByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_FetchExecutorActionsByExecutorId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchExecutorActionsByExecutorIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PekkaServer).FetchExecutorActionsByExecutorId(m, &pekkaFetchExecutorActionsByExecutorIdServer{stream})
}

type Pekka_FetchExecutorActionsByExecutorIdServer interface {
	Send(*ExecutorAction) error
	grpc.ServerStream
}

type pekkaFetchExecutorActionsByExecutorIdServer struct {
	grpc.ServerStream
}

func (x *pekkaFetchExecutorActionsByExecutorIdServer) Send(m *ExecutorAction) error {
	return x.ServerStream.SendMsg(m)
}

func _Pekka_CreateExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).CreateExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/CreateExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).CreateExecutor(ctx, req.(*CreateExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_AddExecutorActionToExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExecutorActionToExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).AddExecutorActionToExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/AddExecutorActionToExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).AddExecutorActionToExecutor(ctx, req.(*AddExecutorActionToExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_EditButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).EditButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/EditButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).EditButton(ctx, req.(*EditButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_FetchPenttiDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchPenttiDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PekkaServer).FetchPenttiDevices(m, &pekkaFetchPenttiDevicesServer{stream})
}

type Pekka_FetchPenttiDevicesServer interface {
	Send(*Pentti) error
	grpc.ServerStream
}

type pekkaFetchPenttiDevicesServer struct {
	grpc.ServerStream
}

func (x *pekkaFetchPenttiDevicesServer) Send(m *Pentti) error {
	return x.ServerStream.SendMsg(m)
}

func _Pekka_FetchPenttiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPenttiByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekkaServer).FetchPenttiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PekkaService.Pekka/FetchPenttiById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekkaServer).FetchPenttiById(ctx, req.(*FetchPenttiByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pekka_FetchButtonsByPenttiId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchButtonsByPenttiIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PekkaServer).FetchButtonsByPenttiId(m, &pekkaFetchButtonsByPenttiIdServer{stream})
}

type Pekka_FetchButtonsByPenttiIdServer interface {
	Send(*Button) error
	grpc.ServerStream
}

type pekkaFetchButtonsByPenttiIdServer struct {
	grpc.ServerStream
}

func (x *pekkaFetchButtonsByPenttiIdServer) Send(m *Button) error {
	return x.ServerStream.SendMsg(m)
}

var _Pekka_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PekkaService.Pekka",
	HandlerType: (*PekkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchWeeklyTimerById",
			Handler:    _Pekka_FetchWeeklyTimerById_Handler,
		},
		{
			MethodName: "fetchWeeklyTimerBySlug",
			Handler:    _Pekka_FetchWeeklyTimerBySlug_Handler,
		},
		{
			MethodName: "createWeeklyTimer",
			Handler:    _Pekka_CreateWeeklyTimer_Handler,
		},
		{
			MethodName: "editWeeklyTimer",
			Handler:    _Pekka_EditWeeklyTimer_Handler,
		},
		{
			MethodName: "fetchExecutorById",
			Handler:    _Pekka_FetchExecutorById_Handler,
		},
		{
			MethodName: "createExecutor",
			Handler:    _Pekka_CreateExecutor_Handler,
		},
		{
			MethodName: "addExecutorActionToExecutor",
			Handler:    _Pekka_AddExecutorActionToExecutor_Handler,
		},
		{
			MethodName: "editButton",
			Handler:    _Pekka_EditButton_Handler,
		},
		{
			MethodName: "fetchPenttiById",
			Handler:    _Pekka_FetchPenttiById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchWeeklyTimers",
			Handler:       _Pekka_FetchWeeklyTimers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchExecutors",
			Handler:       _Pekka_FetchExecutors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchExecutorActionsByExecutorId",
			Handler:       _Pekka_FetchExecutorActionsByExecutorId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchPenttiDevices",
			Handler:       _Pekka_FetchPenttiDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchButtonsByPenttiId",
			Handler:       _Pekka_FetchButtonsByPenttiId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pekka_service.proto",
}

func init() { proto.RegisterFile("pekka_service.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x67, 0x16, 0xb0, 0x30, 0xa3, 0x8e, 0x6a, 0x86, 0x91, 0x28, 0x48, 0x8c, 0x86, 0x5e,
	0xc4, 0x45, 0x55, 0x01, 0xf1, 0x00, 0x4d, 0x29, 0x52, 0x77, 0x85, 0x56, 0xaa, 0x84, 0x84, 0xd2,
	0x34, 0x39, 0x85, 0xa8, 0x25, 0x09, 0xb1, 0x53, 0x88, 0xd8, 0xf2, 0x24, 0x3c, 0x29, 0x8a, 0x9d,
	0x63, 0xd9, 0x69, 0x2e, 0x9d, 0x65, 0x7c, 0x3e, 0xff, 0xbf, 0x8f, 0xfd, 0xe7, 0x90, 0x87, 0x11,
	0xec, 0x76, 0x8e, 0xcd, 0x20, 0x3e, 0xf8, 0x2e, 0x0c, 0xa3, 0x38, 0xe4, 0x21, 0xbd, 0x98, 0x67,
	0x8b, 0x0b, 0xb9, 0xd6, 0xa1, 0xbf, 0x00, 0x76, 0xfb, 0xd4, 0xe6, 0xfe, 0x0f, 0x88, 0x25, 0xd1,
	0xb9, 0x88, 0x20, 0xe0, 0xdc, 0xc7, 0xaf, 0x4d, 0xc2, 0x79, 0x18, 0xe4, 0x5f, 0x2d, 0xf8, 0x0d,
	0x6e, 0xc2, 0x43, 0x64, 0x1f, 0xe1, 0xb7, 0xed, 0xb8, 0xdc, 0x57, 0x58, 0x1b, 0x0e, 0x10, 0x70,
	0x5d, 0xf5, 0xed, 0xbf, 0x07, 0xe4, 0x9e, 0xb0, 0xa6, 0x5f, 0x48, 0x7b, 0x0b, 0xdc, 0xfd, 0xbe,
	0x12, 0xd6, 0xcb, 0x8c, 0x61, 0xb4, 0x3f, 0xd4, 0xcf, 0x35, 0xfc, 0x58, 0x04, 0x3e, 0xc3, 0xcf,
	0x04, 0x18, 0xef, 0x3c, 0x36, 0x39, 0x0d, 0xb9, 0x3d, 0x1b, 0x9d, 0xd3, 0x90, 0x5c, 0x15, 0xb5,
	0xad, 0x74, 0xe6, 0xd1, 0x17, 0xf5, 0xf2, 0x19, 0x83, 0x0e, 0x2f, 0x4f, 0x41, 0x59, 0x14, 0x06,
	0x0c, 0x6e, 0xcf, 0x68, 0x42, 0xae, 0x8f, 0x0d, 0x17, 0xfb, 0xe4, 0x1b, 0x7d, 0xd5, 0xa4, 0x93,
	0x51, 0x68, 0xfa, 0xfa, 0x34, 0x58, 0xd9, 0x6e, 0x49, 0xdb, 0x8d, 0xc1, 0xe1, 0xa0, 0x41, 0xc5,
	0x3b, 0x9c, 0x14, 0x01, 0x34, 0x1b, 0x34, 0x72, 0xca, 0x67, 0x4d, 0x2e, 0xc1, 0xf3, 0xb9, 0xee,
	0xd2, 0x35, 0x77, 0x4f, 0xcd, 0x32, 0x7a, 0xf4, 0x1a, 0x28, 0xe5, 0xf0, 0x89, 0xb4, 0xc4, 0x05,
	0x4e, 0xf3, 0x20, 0x31, 0xfa, 0xbc, 0xe4, 0x2e, 0x54, 0x15, 0xf5, 0xaf, 0x0b, 0xfa, 0x79, 0x5d,
	0x84, 0x60, 0x9b, 0x07, 0x0c, 0x17, 0x45, 0x02, 0xfa, 0x35, 0xaa, 0xfa, 0xf3, 0x0f, 0x1a, 0x39,
	0x75, 0xf4, 0x3f, 0xe4, 0xc6, 0xf0, 0x19, 0x8b, 0x5f, 0x80, 0x59, 0x29, 0x2e, 0xcc, 0x3c, 0xfa,
	0xbe, 0x46, 0xae, 0x84, 0xc7, 0x53, 0x3c, 0x2d, 0x6f, 0x4f, 0xee, 0x10, 0x4d, 0x7e, 0x25, 0x2d,
	0x99, 0x00, 0xac, 0x15, 0xef, 0x6d, 0x62, 0x54, 0x51, 0xb8, 0x5b, 0x0f, 0xa9, 0xde, 0xfe, 0x9e,
	0x93, 0x27, 0x8e, 0xe7, 0x99, 0xc6, 0xcb, 0x50, 0x99, 0x8d, 0x4c, 0x9d, 0x71, 0x35, 0x8a, 0xce,
	0x6f, 0xee, 0xb0, 0x43, 0x4b, 0x07, 0xc9, 0xf2, 0x67, 0x89, 0x19, 0x44, 0x9f, 0x1d, 0x87, 0x4a,
	0x56, 0xd0, 0xe3, 0xa6, 0x1a, 0x50, 0x92, 0x2b, 0x42, 0xc5, 0xab, 0xcd, 0xc5, 0x94, 0xfb, 0x00,
	0x19, 0xc9, 0x68, 0xd9, 0xb3, 0x1b, 0x04, 0x5a, 0x5c, 0x99, 0xa0, 0x64, 0xc4, 0x8b, 0xac, 0xc9,
	0xa5, 0x26, 0x2c, 0x42, 0xd7, 0xad, 0x54, 0xd5, 0x23, 0xd7, 0x6b, 0xa0, 0xd4, 0xd1, 0xed, 0x7c,
	0xd8, 0xc8, 0x9e, 0x98, 0x95, 0x4a, 0x6a, 0xe6, 0x95, 0x0e, 0x9b, 0x23, 0xaa, 0xa2, 0x05, 0xc9,
	0x65, 0x2d, 0x6c, 0xee, 0x8b, 0x59, 0xfd, 0xee, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x34,
	0xe6, 0x99, 0x3a, 0x06, 0x00, 0x00,
}
