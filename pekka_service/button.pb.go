// Code generated by protoc-gen-go.
// source: button.proto
// DO NOT EDIT!

package PekkaService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Button struct {
	Id            uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Number        uint32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	PenttiId      uint32 `protobuf:"varint,3,opt,name=penttiId" json:"penttiId,omitempty"`
	OnExecutorId  uint32 `protobuf:"varint,4,opt,name=onExecutorId" json:"onExecutorId,omitempty"`
	OffExecutorId uint32 `protobuf:"varint,5,opt,name=offExecutorId" json:"offExecutorId,omitempty"`
}

func (m *Button) Reset()                    { *m = Button{} }
func (m *Button) String() string            { return proto.CompactTextString(m) }
func (*Button) ProtoMessage()               {}
func (*Button) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Button) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Button) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Button) GetPenttiId() uint32 {
	if m != nil {
		return m.PenttiId
	}
	return 0
}

func (m *Button) GetOnExecutorId() uint32 {
	if m != nil {
		return m.OnExecutorId
	}
	return 0
}

func (m *Button) GetOffExecutorId() uint32 {
	if m != nil {
		return m.OffExecutorId
	}
	return 0
}

type EditButtonRequest struct {
	ButtonId      uint32 `protobuf:"varint,1,opt,name=buttonId" json:"buttonId,omitempty"`
	OnExecutorId  uint32 `protobuf:"varint,4,opt,name=onExecutorId" json:"onExecutorId,omitempty"`
	OffExecutorId uint32 `protobuf:"varint,5,opt,name=offExecutorId" json:"offExecutorId,omitempty"`
}

func (m *EditButtonRequest) Reset()                    { *m = EditButtonRequest{} }
func (m *EditButtonRequest) String() string            { return proto.CompactTextString(m) }
func (*EditButtonRequest) ProtoMessage()               {}
func (*EditButtonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *EditButtonRequest) GetButtonId() uint32 {
	if m != nil {
		return m.ButtonId
	}
	return 0
}

func (m *EditButtonRequest) GetOnExecutorId() uint32 {
	if m != nil {
		return m.OnExecutorId
	}
	return 0
}

func (m *EditButtonRequest) GetOffExecutorId() uint32 {
	if m != nil {
		return m.OffExecutorId
	}
	return 0
}

type EditButtonResponse struct {
	Button *Button `protobuf:"bytes,1,opt,name=button" json:"button,omitempty"`
}

func (m *EditButtonResponse) Reset()                    { *m = EditButtonResponse{} }
func (m *EditButtonResponse) String() string            { return proto.CompactTextString(m) }
func (*EditButtonResponse) ProtoMessage()               {}
func (*EditButtonResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *EditButtonResponse) GetButton() *Button {
	if m != nil {
		return m.Button
	}
	return nil
}

func init() {
	proto.RegisterType((*Button)(nil), "PekkaService.Button")
	proto.RegisterType((*EditButtonRequest)(nil), "PekkaService.EditButtonRequest")
	proto.RegisterType((*EditButtonResponse)(nil), "PekkaService.EditButtonResponse")
}

func init() { proto.RegisterFile("button.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2a, 0x2d, 0x29,
	0xc9, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x09, 0x48, 0xcd, 0xce, 0x4e, 0x0c,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x55, 0x9a, 0xc6, 0xc8, 0xc5, 0xe6, 0x04, 0x96, 0x16, 0xe2,
	0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x62, 0xca, 0x4c, 0x11, 0x12,
	0xe3, 0x62, 0xcb, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x92, 0x60, 0x02, 0x8b, 0x41, 0x79, 0x42, 0x52,
	0x5c, 0x1c, 0x05, 0xa9, 0x79, 0x25, 0x25, 0x99, 0x9e, 0x29, 0x12, 0xcc, 0x60, 0x19, 0x38, 0x5f,
	0x48, 0x89, 0x8b, 0x27, 0x3f, 0xcf, 0xb5, 0x22, 0x35, 0xb9, 0xb4, 0x24, 0xbf, 0xc8, 0x33, 0x45,
	0x82, 0x05, 0x2c, 0x8f, 0x22, 0x26, 0xa4, 0xc2, 0xc5, 0x9b, 0x9f, 0x96, 0x86, 0xa4, 0x88, 0x15,
	0xac, 0x08, 0x55, 0x50, 0xa9, 0x92, 0x4b, 0xd0, 0x35, 0x25, 0xb3, 0x04, 0xe2, 0xb6, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x90, 0xd5, 0x10, 0xbf, 0x78, 0xc2, 0x1c, 0x0a, 0xe7, 0x53, 0xd1,
	0x6a, 0x27, 0x2e, 0x21, 0x64, 0xab, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x74, 0xb8, 0xd8,
	0x20, 0x76, 0x81, 0x6d, 0xe6, 0x36, 0x12, 0xd1, 0x43, 0x0e, 0x48, 0x3d, 0xa8, 0x6a, 0xa8, 0x9a,
	0x24, 0x36, 0x70, 0x60, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x65, 0x29, 0x1b, 0x7c,
	0x01, 0x00, 0x00,
}
